"use client";

import type React from "react";

import { useState, useRef, useEffect } from "react";
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from "@/components/ui/tabs";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Slider } from "@/components/ui/slider";
import { Separator } from "@/components/ui/separator";
import { Badge } from "@/components/ui/badge";
import {
  AlertCircle,
  Upload,
  ImageIcon,
  Wand2,
  Eraser,
  CuboidIcon as Cube,
  Edit,
  Download,
  Save,
  Share2,
  ShoppingCart,
  Repeat,
  ZoomIn,
  ZoomOut,
  RotateCw,
  Sun,
  Contrast,
  Square,
  Circle,
  Heart,
  Trash2,
  Check,
  X,
  Loader2,
  Search,
  Loader,
  Grid,
  List,
  Cake,
  HeartIcon,
  Briefcase,
  GraduationCap,
  Baby,
  CalendarDays,
  Sparkles,
  ChevronRight,
  ArrowLeft,
  ChevronDown,
  ChevronUp,
} from "lucide-react";
import { toast } from "@/components/ui/use-toast";
import { createClient } from "@/lib/supabase";
import { H1Card } from "@/components/h1-card";
import { type PexelsPhoto, occasionToSearchTerms } from "@/lib/pexels-api";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from "@/components/ui/collapsible";
import dynamic from "next/dynamic";

// Dynamically import the Cookie3DPreview component with no SSR
const Cookie3DPreview = dynamic(() => import("@/components/cookie-3d-preview"), {
  ssr: false,
  loading: () => (
    <div className="w-full h-64 md:h-80 bg-gray-100 flex items-center justify-center">
      <div className="flex flex-col items-center">
        <div className="w-8 h-8 border-4 border-rose-500 border-t-transparent rounded-full animate-spin mb-2"></div>
        <p className="text-sm text-gray-500">Loading 3D Preview...</p>
      </div>
    </div>
  ),
});

// Define types for our design state
type DesignState = {
  imageUrl: string | null;
  editedImageUrl: string | null;
  generatedImageUrl: string | null;
  removedBgImageUrl: string | null;
  upscaledImageUrl: string | null;
  cookieShape: string;
  editSettings: {
    zoom: number;
    rotation: number;
    brightness: number;
    contrast: number;
    textOverlay: string;
    textColor: string;
    overlayColor: string;
    selectedShape: string;
  };
};

// Define types for our gallery state
type GalleryState = {
  photos: PexelsPhoto[];
  isLoading: boolean;
  searchTerm: string;
  page: number;
  hasMore: boolean;
  totalResults: number;
  orientation: string | null;
  color: string | null;
  size: string | null;
};

"use client";

import type React from "react";

import { useState, useRef, useEffect } from "react";
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from "@/components/ui/tabs";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Slider } from "@/components/ui/slider";
import { Separator } from "@/components/ui/separator";
import { Badge } from "@/components/ui/badge";
import {
  AlertCircle,
  Upload,
  ImageIcon,
  Wand2,
  Eraser,
  CuboidIcon as Cube,
  Edit,
  Download,
  Save,
  Share2,
  ShoppingCart,
  Repeat,
  ZoomIn,
  ZoomOut,
  RotateCw,
  Sun,
  Contrast,
  Square,
  Circle,
  Heart,
  Trash2,
  Check,
  X,
  Loader2,
  Search,
  Loader,
  Grid,
  List,
  Cake,
  HeartIcon,
  Briefcase,
  GraduationCap,
  Baby,
  CalendarDays,
  Sparkles,
  ChevronRight,
  ArrowLeft,
  ChevronDown,
  ChevronUp,
} from "lucide-react";
import { toast } from "@/components/ui/use-toast";
import { createClient } from "@/lib/supabase";
import { H1Card } from "@/components/h1-card";
import { type PexelsPhoto, occasionToSearchTerms } from "@/lib/pexels-api";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from "@/components/ui/collapsible";
import dynamic from "next/dynamic";

// Dynamically import the Cookie3DPreview component with no SSR
const Cookie3DPreview = dynamic(() => import("@/components/cookie-3d-preview"), {
  ssr: false,
  loading: () => (
    <div className="w-full h-64 md:h-80 bg-gray-100 flex items-center justify-center">
      <div className="flex flex-col items-center">
        <div className="w-8 h-8 border-4 border-rose-500 border-t-transparent rounded-full animate-spin mb-2"></div>
        <p className="text-sm text-gray-500">Loading 3D Preview...</p>
      </div>
    </div>
  ),
});

// Define types for our design state
type DesignState = {
  imageUrl: string | null;
  editedImageUrl: string | null;
  generatedImageUrl: string | null;
  removedBgImageUrl: string | null;
  upscaledImageUrl: string | null;
  cookieShape: string;
  editSettings: {
    zoom: number;
    rotation: number;
    brightness: number;
    contrast: number;
    textOverlay: string;
    textColor: string;
    overlayColor: string;
    selectedShape: string;
  };
};

// Define types for our gallery state
type GalleryState = {
  photos: PexelsPhoto[];
  isLoading: boolean;
  searchTerm: string;
  page: number;
  hasMore: boolean;
  totalResults: number;
  orientation: string | null;
  color: string | null;
  size: string | null;
};

// Cookie shapes with correct images
const cookieShapes = [
  { id: "circle", name: "Circle", svgPath: "/cookie-shapes/circle.svg" },
  { id: "heart", name: "Heart", svgPath: "/cookie-shapes/heart.svg" },
  { id: "square", name: "Square", svgPath: "/cookie-shapes/square.svg" },
  { id: "star", name: "Star", svgPath: "/cookie-shapes/star.svg" },
  { id: "clover", name: "Clover", svgPath: "/cookie-shapes/clover.svg" },
  { id: "bunny", name: "Bunny", svgPath: "/cookie-shapes/9.svg" },
];

// Additional cookie shapes for the "More Shapes" dropdown
const additionalShapes = [
  { id: "crown", name: "Crown", svgPath: "/cookie-shapes/10.svg" },
  { id: "lips", name: "Lips", svgPath: "/cookie-shapes/11.svg" },
  { id: "bottle", name: "Bottle", svgPath


  // ... (previous code remains the same)

 // Gallery view state (categories or images)
 const [galleryView, setGalleryView] = useState<"categories" | "images">("categories");
 const [selectedCategory, setSelectedCategory] = useState<string | null>(null);

 // Category preview images from Pexels
 const [categoryPreviews, setCategoryPreviews] = useState<Record<string, PexelsPhoto[]>>({});

 // Initialize design state
 const [designState, setDesignState] = useState<DesignState>({
 imageUrl: null,
 editedImageUrl: null,
 generatedImageUrl: null,
 removedBgImageUrl: null,
 upscaledImageUrl: null,
 cookieShape: "circle",
 editSettings: {
 zoom: 100,
 rotation: 0,
 brightness: 100,
 contrast: 100,
 textOverlay: "",
 textColor: "#ffffff",
 overlayColor: "rgba(0,0,0,0)",
 selectedShape: "none",
 },
 });

 // Gallery state
 const [galleryState, setGalleryState] = useState<GalleryState>({
 photos: [],
 isLoading: false,
 searchTerm: "",
 page: 1,
 hasMore: false,
 totalResults: 0,
 orientation: null,
 color: null,
 size: null,
 });
 const [searchInput, setSearchInput] = useState("");

 // Function to handle file upload
 const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
 const file = event.target.files?.[0];
 if (!file) return;

 setIsLoading(true);

 try {
 // Create a local URL for preview
 const localUrl = URL.createObjectURL(file);

 // Update state with the local URL for immediate feedback
 setDesignState((prev) => ({
 ...prev,
 imageUrl: localUrl,
 }));

 // For demo purposes, we'll just use the local URL
 // In production, you would upload to your server/Supabase
 setTimeout(() => {
 setDesignState((prev) => ({
 ...prev,
 imageUrl: localUrl,
 }));

 toast({
 title: "Upload successful",
 description: "Your image has been uploaded successfully.",
 });

 setIsLoading(false);
 }, 1000);
 } catch (error) {
 console.error("Upload error:", error);
 toast({
 title: "Upload failed",
 description: "There was an error uploading your image. Please try again.",
 variant: "destructive",
 });
 setIsLoading(false);
 }
 };

 // Function to handle gallery item selection
 const handleGallerySelect = (id: number, imageUrl: string) => {
 setSelectedGalleryItem(id);
 setDesignState((prev) => ({
 ...prev,
 imageUrl: imageUrl,
 }));

 toast({
 title: "Image selected",
 description: "Gallery image has been selected for customization.",
 });
 };

 // Function to handle category selection
 const handleCategorySelect = (categoryId: string) => {
 setSelectedCategory(categoryId);
 setGalleryView("images");

 // Find the category and set the search term based on it
 const category = designCategories.find((cat) => cat.id === categoryId);
 if (category) {
 setSelectedOccasion(category.name);
 setSearchInput(category.searchTerm);
 setGalleryState((prev) => ({ ...prev, searchTerm: category.searchTerm }));

 // Fetch images for this category from Pexels API
 fetchPexelsImages(category.searchTerm, 1);
 }
 };

 // Function to go back to categories view
 const handleBackToCategories = () => {
 setGalleryView("categories");
 setSelectedCategory(null);
 };

 // Function to handle image generation
 const handleGenerateImage = async () => {
 if (!prompt.trim()) {
 toast({
 title: "Prompt required",
 description: "Please enter a description to generate an image.",
 variant: "destructive",
 });
 return;
 }

 setIsGenerating(true);

 try {
 // For demo purposes, we'll use a placeholder image
 // In production, you would call your AI image generation API
 setTimeout(() => {
 const demoImageUrl = `/placeholder.svg?height=512&width=512&query=${encodeURIComponent(prompt)}`; // Updated to use template literals

 setDesignState((prev) => ({
 ...prev,
 generatedImageUrl: demoImageUrl,
 imageUrl: demoImageUrl,
 }));

 toast({
 title: "Image generated",
 description: "Your AI image has been created successfully.",
 });

 setIsGenerating(false);
 }, 2000);
 } catch (error) {
 console.error("Generation error:", error);
 toast({
 title: "Generation failed",
 description: "There was an error generating your image. Please try again.",
 variant: "destructive",
 });
 setIsGenerating(false);
 }
 };

 // Function to handle background removal
 const handleRemoveBackground = async () => {
 if (!designState.imageUrl) {
 toast({
 title: "No image selected",
 description: "Please upload or select an image first.",
 variant: "destructive",
 });
 return;
 }

    // Function to handle background removal
const handleRemoveBackground = async () => {
 if (!designState.imageUrl) {
 toast({
 title: "No image selected",
 description: "Please upload or select an image first.",
 variant: "destructive",
 });
 return;
 }

 setIsRemovingBackground(true);

 try {
 setDesignState((prev) => ({
 ...prev,
 removedBgImageUrl: prev.imageUrl,
 imageUrl: prev.imageUrl,
 }));

 toast({
 title: "Background removed",
 description: "Background has been removed from your image.",
 });

 setIsRemovingBackground(false);
 } catch (error) {
 console.error("Processing error:", error);
 toast({
 title: "Processing failed",
 description: "There was an error processing your image. Please try again.",
 variant: "destructive",
 });
 setIsRemovingBackground(false);
 }
};

// Function to handle image upscaling
const handleUpscaleImage = async () => {
 if (!designState.imageUrl) {
 toast({
 title: "No image selected",
 description: "Please upload or select an image first.",
 variant: "destructive",
 });
 return;
 }

 setIsUpscaling(true);

 try {
 setDesignState((prev) => ({
 ...prev,
 upscaledImageUrl: prev.imageUrl,
 imageUrl: prev.imageUrl,
 }));

 toast({
 title: "Image upscaled",
 description: "Your image has been enhanced successfully.",
 });

 setIsUpscaling(false);
 } catch (error) {
 console.error("Processing error:", error);
 toast({
 title: "Processing failed",
 description: "There was an error processing your image. Please try again.",
 variant: "destructive",
 });
 setIsUpscaling(false);
 }
};

// Function to update edit settings
const updateEditSettings = (key: keyof DesignState["editSettings"], value: any) => {
 setDesignState((prev) => ({
 ...prev,
 editSettings: {
 ...prev.editSettings,
 [key]: value,
 },
 }));
};

// Function to apply edits
const applyEdits = async () => {
 if (!designState.imageUrl) {
 toast({
 title: "No image selected",
 description: "Please upload or select an image first.",
 variant: "destructive",
 });
 return;
 }

 setIsProcessing(true);

 try {
 setDesignState((prev) => ({
 ...prev,
 editedImageUrl: prev.imageUrl,
 imageUrl: prev.imageUrl,
 }));

 toast({
 title: "Edits applied",
 description: "Your image edits have been applied successfully.",
 });

 setIsProcessing(false);
 } catch (error) {
 console.error("Edit error:", error);
 toast({
 title: "Edit failed",
 description: "There was an error applying your edits. Please try again.",
 variant: "destructive",
 });
 setIsProcessing(false);
 }
};

// Function to handle cookie shape selection
const handleShapeSelect = (shape: string) => {
 setDesignState((prev) => ({
 ...prev,
 cookieShape: shape,
 }));
};

// Function to download the current design
const handleDownload = async () => {
 if (!designState.imageUrl) {
 toast({
 title: "No image to download",
 description: "Please create or select an image first.",
 variant: "destructive",
 });
 return;
 }

 try {
 const link = document.createElement("a");
 link.href = designState.imageUrl;
 link.download = "dessert-print-design.png";
 document.body.appendChild(link);
 link.click();
 document.body.removeChild(link);

 toast({
 title: "Download started",
 description: "Your design is being downloaded.",
 });
 } catch (error) {
 console.error("Download error:", error);
 toast({
 title: "Download failed",
 description: "There was an error downloading your design. Please try again.",
 });
 }
};

// Function to save design to user dashboard
const handleSaveDesign = async () => {
 if (!designState.imageUrl) {
 toast({
 title: "No design to save",
 description: "Please create or select an image first.",
 variant: "destructive",
 });
 return;
 }

 setIsLoading(true);

 try {
 const supabase = createClient();

 const { data, error } = await supabase.storage
 .from("designs")
 .upload(designState.imageUrl, {
 cacheControl: "public, max-age=31536000",
 });

 if (error) {
 console.error("Save error:", error);
 toast({
 title: "Save failed",
 description: "There was an error saving your design. Please try again.",
 variant: "destructive",
 });
 } else {
 toast({
 title: "Design saved",
 description: "Your design has been saved to your dashboard.",
 });
 }

 setIsLoading(false);
 } catch (error) {
 console.error("Save error:", error);
 toast({
 title: "Save failed",
 description: "There was an error saving your design. Please try again.",
 variant: "destructive",
 });
 setIsLoading(false);
 }
};

  // Function to send current image to another tool
const sendToTool = (tool: string) => {
 if (!designState.imageUrl) {
 toast({
 title: "No image selected",
 description: "Please create or select an image first.",
 variant: "destructive",
 });
 return;
 }

 navigateToTab(tool);

 toast({
 title: "Image transferred",
 description: `Your image has been sent to the ${tool} tool.`,
 });
};

// Function to update gallery filters
const updateGalleryFilter = (filterType: "orientation" | "color" | "size", value: string | null) => {
 setGalleryState((prev) => ({
 ...prev,
 [filterType]: value,
 page: 1, // Reset to first page when changing filters
 }));

 // Refetch with new filters
 fetchPexelsImages(
 galleryState.searchTerm,
 1,
 value === filterType ? value : galleryState[filterType],
 filterType === "color" ? value : galleryState.color,
 filterType === "size" ? value : galleryState.size,
 );
};

// Function to toggle filter visibility
const toggleFilters = () => {
 setShowFilters(!showFilters);
};

// Function to reset all filters
const resetFilters = () => {
 setGalleryState((prev) => ({
 ...prev,
 orientation: null,
 color: null,
 size: null,
 page: 1,
 }));
 fetchPexelsImages(galleryState.searchTerm, 1);
};

// Function to fetch images from Pexels API
const fetchPexelsImages = async (
 searchTerm = "",
 page = 1,
 orientation = galleryState.orientation,
 color = galleryState.color,
 size = galleryState.size,
) => {
 setGalleryState((prev) => ({ ...prev, isLoading: true }));

 try {
 // Fetch images from Pexels API
 const supabase = createClient();
 const { data, error } = await supabase
 .from("pexels")
 .select("*")
 .eq("search_term", searchTerm);

 if (error) {
 console.error("Error fetching images:", error);
 toast({
 title: "API connection issue",
 description: "We're having trouble connecting to the image service. Please try again later.",
 variant: "destructive",
 });
 } else {
 setGalleryState((prev) => ({
 ...prev,
 photos: page === 1 ? data : [...prev.photos, ...data],
 isLoading: false,
 page,
 hasMore: data.length > 0,
 totalResults: data.length,
 }));
 }
 } catch (error) {
 console.error("Error fetching images:", error);
 toast({
 title: "API connection issue",
 description: "We're having trouble connecting to the image service. Please try again later.",
 variant: "destructive",
 });
 setGalleryState((prev) => ({
 ...prev,
 isLoading: false,
 }));
 }
};
          {/* Mobile sidebar toggle */}
<div className="md:hidden mb-4">
  <Button
    variant="outline"
    onClick={toggleSidebar}
    className="w-full flex items-center justify-between"
    style={{ background: "#f8d7e9" }}
  >
    <span>Tools</span>
    {sidebarOpen ? <ChevronUp size={16} /> : <ChevronDown size={16} />}
  </Button>
</div>

{/* Upload Tab */}
<TabsContent value="upload">
  <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
    {/* Tools Sidebar */}
    {sidebarOpen && (
      <div className="md:col-span-1 order-2 md:order-1">
        <Card className="bg-[#f8d7e9] sticky top-4">
          <CardHeader className="p-4">
            <CardTitle className="text-lg">Upload Tools</CardTitle>
            <CardDescription>Select an option to get started</CardDescription>
          </CardHeader>
          <CardContent className="space-y-3 p-4">
            <Button
              className="w-full justify-start text-sm"
              variant="outline"
              onClick={() => fileInputRef.current?.click()}
            >
              <Upload className="h-4 w-4 mr-2" />
              Upload from Device
            </Button>

            <Button
              className="w-full justify-start text-sm"
              variant="outline"
              onClick={() => navigateToTab("gallery")}
            >
              <ImageIcon className="h-4 w-4 mr-2" />
              Browse Gallery
            </Button>

            <Button
              className="w-full justify-start text-sm"
              variant="outline"
              onClick={() => navigateToTab("generate")}
            >
              <Wand2 className="h-4 w-4 mr-2" />
              Generate with AI
            </Button>

            {designState.imageUrl && (
              <>
                <Separator />
                <p className="text-sm font-medium">Image Selected</p>
                <Button
                  className="w-full justify-start text-sm"
                  variant="outline"
                  onClick={() => setDesignState((prev) => ({ ...prev, imageUrl: null }))}
                >
                  <Trash2 className="h-4 w-4 mr-2" />
                  Clear Selection
                </Button>

                <Separator />
                <p className="text-sm font-medium">Next Steps</p>
                <Button
                  className="w-full justify-start text-sm bg-rose-600 hover:bg-rose-700 text-white"
                  onClick={() => sendToTool("edit")}
                >
                  <Edit className="h-4 w-4 mr-2" />
                  Edit Design
                </Button>

                <Button
                  className="w-full justify-start text-sm"
                  variant="outline"
                  onClick={() => sendToTool("process")}
                >
                  <Eraser className="h-4 w-4 mr-2" />
                  Remove Background
                </Button>

                <Button
                  className="w-full justify-start text-sm"
                  variant="outline"
                  onClick={() => sendToTool("preview3d")}
                >
                  <Cube className="h-4 w-4 mr-2" />
                  3D Preview
                </Button>
              </>
            )}
          </CardContent>

                      <Separator />
                      <p className="text-sm font-medium">View Options</p>
                      <div className="flex gap-2">
                        <Button
                          variant={galleryView === "categories" ? "default" : "outline"}
                          onClick={() => setGalleryView("categories")}
                          className="flex-1 text-sm"
                        >
                          <Grid className="h-4 w-4 mr-2" />
                          Categories
                        </Button>
                        <Button
                          variant={galleryView === "images" ? "default" : "outline"}
                          onClick={() => setGalleryView("images")}
                          className="flex-1 text-sm"
                        >
                          <List className="h-4 w-4 mr-2" />
                          Images
                        </Button>
                      </div>

                      {galleryView === "images" && (
                        <Collapsible open={showFilters} onOpenChange={toggleFilters}>
                          <CollapsibleTrigger asChild>
                            <Button variant="outline" className="w-full justify-between text-sm">
                              <span>Filter Options</span>
                              {showFilters ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />}
                            </Button>
                          </CollapsibleTrigger>
                          <CollapsibleContent className="space-y-3 pt-2">
                            <div>
                              <Label className="text-xs">Orientation</Label>
                              <Select
                                value={galleryState.orientation || "all"}
                                onValueChange={(val) => updateGalleryFilter("orientation", val === "all" ? null : val)}
                              >
                                <SelectTrigger>
                                  <SelectValue placeholder="Select orientation" />
                                </SelectTrigger>
                                <SelectContent>
                                  <SelectItem value="all">All</SelectItem>
                                  <SelectItem value="landscape">Landscape</SelectItem>
                                  <SelectItem value="portrait">Portrait</SelectItem>
                                  <SelectItem value="square">Square</SelectItem>
                                </SelectContent>
                              </Select>
                            </div>

                            <div>
                              <Label className="text-xs">Color</Label>
                              <Select
                                value={galleryState.color || "all"}
                                onValueChange={(val) => updateGalleryFilter("color", val === "all" ? null : val)}
                              >
                                <SelectTrigger>
                                  <SelectValue placeholder="Select color" />
                                </SelectTrigger>
                                <SelectContent>
                                  <SelectItem value="all">All Colors</SelectItem>
                                  {colorOptions.map((color) => (
                                    <SelectItem key={color.value} value={color.value}>
                                      <div className="flex items-center">
                                        <div
                                          className="w-3 h-3 rounded-full mr-2"
                                          style={{ backgroundColor: color.value }}
                                        ></div>
                                        {color.name}
                                      </div>
                                    </SelectItem>
                                  ))}
                                </SelectContent>
                              </Select>
                            </div>

                            <Button variant="ghost" size="sm" onClick={resetFilters} className="w-full text-sm">
                              Reset Filters
                            </Button>
                          </CollapsibleContent>
                        </Collapsible>
                      )}

                      {designState.imageUrl && (
                        <>
                          <Separator />
                          <p className="text-sm font-medium">Selected Image</p>
                          <Button
                            className="w-full justify-start text-sm"
                            variant="outline"
                            onClick={() => setDesignState((prev) => ({ ...prev, imageUrl: null }))}
                          >
                            <Trash2 className="h-4 w-4 mr-2" />
                            Clear Selection
                          </Button>

                          <Separator />
                          <p className="text-sm font-medium">Next Steps</p>
                          <Button
                            className="w-full justify-start text-sm bg-rose-600 hover:bg-rose-700 text-white"
                            onClick={() => sendToTool("edit")}
                          >
                            <Edit className="h-4 w-4 mr-2" />
                            Edit Design
                          </Button>

                          <Button
                            className="w-full justify-start text-sm"
                            variant="outline"
                            onClick={() => sendToTool("process")}
                          >
                            <Eraser className="h-4 w-4 mr-2" />
                            Remove Background
                          </Button>

                          <Button
                            className="w-full justify-start text-sm"
                            variant="outline"
                            onClick={() => sendToTool("preview3d")}
                          >
                            <Cube className="h-4 w-4 mr-2" />
                            3D Preview
                          </Button>
                        </>
                      )}
                    </CardContent>
                  </Card>
                </div>
              )}

              {/* Main Content */}
              <Card className="md:col-span-3 order-1 md:order-2">
                <CardHeader className="p-4">
                  <CardTitle>Design Gallery</CardTitle>
                  <CardDescription>Browse our collection of designs by category</CardDescription>

                  {galleryView === "images" && selectedCategory && (
                    <div className="flex items-center mt-2">
                      <Button variant="ghost" onClick={handleBackToCategories} className="p-0 mr-2">
                        <ArrowLeft className="h-4 w-4 mr-1" />
                        Back to Categories
                      </Button>
                      <Badge variant="outline" className="ml-2">
                        {designCategories.find((cat) => cat.id === selectedCategory)?.name || "Category"}
                      </Badge>
                    </div>
                  )}
                </CardHeader>
                <CardContent className="p-4">
                  {galleryView === "categories" ? (
                    <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
                      {designCategories.map((category) => (
                        <div
                          key={category.id}
                          className="relative rounded-xl overflow-hidden cursor-pointer transition-all hover:shadow-lg"
                          onClick={() => handleCategorySelect(category.id)}
                        >
                          <div className={`bg-gradient-to-r ${category.color} p-4 sm:p-6 h-full flex flex-col`}>
                            {categoryPreviews[category.id] && categoryPreviews[category.id].length > 0 ? (
                              <div className="absolute inset-0 z-0 opacity-30">
                                <img
                                  src={categoryPreviews[category.id][0].src.large || "/placeholder.svg"}
                                  alt={category.name}
                                  className="w-full h-full object-cover"
                                />
                                <div className="absolute inset-0 bg-gradient-to-r from-black/50 to-black/30"></div>
                              </div>
                            ) : null}
                            <div className="relative z-10">
                              <div className="flex items-center mb-3">
                                <div className="bg-white/20 p-2 rounded-full mr-2">{category.icon}</div>
                                <h3 className="text-lg font-bold text-white">{category.name}</h3>
                              </div>
                              <p className="text-white/80 mb-3 text-sm">{category.description}</p>
                              <div className="mt-auto flex justify-between items-center">
                                <span className="text-white/90 text-xs">Browse designs</span>
                                <ChevronRight className="h-4 w-4 text-white/90" />
                              </div>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  ) : galleryState.isLoading && galleryState.photos.length === 0 ? (
                    <div className="flex justify-center items-center h-64">
                      <Loader className="h-8 w-8 animate-spin text-primary" />
                    </div>
                  ) : galleryState.photos.length > 0 ? (
                    <>
                      <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-3">
                        {galleryState.photos.map((photo) => (
                          <div
                            key={photo.id}
                            className="relative rounded-lg overflow-hidden cursor-pointer transition-all hover:shadow-lg"
                            onClick={() => handlePexelsImageSelect(photo)}
                          >
                            <img
                              src={photo.src.medium || photo.src.original}
                              alt={photo.alt || "Gallery image"}
                              className="w-full aspect-square object-cover"
                            />
                            <div className="absolute inset-0 bg-black bg-opacity-40 flex items-end p-2 transition-opacity hover:bg-opacity-30">
                              <div>
                                <p className="text-white text-xs opacity-80">Photo by {photo.photographer}</p>
                              </div>
                            </div>
                            {designState.imageUrl === (photo.src.large || photo.src.original) && (
                              <div className="absolute top-2 right-2">
                                <Badge variant="default" className="text-xs">
                                  <Check className="h-3 w-3 mr-1" />
                                  Selected
                                </Badge>
                              </div>
                            )}
                          </div>
                        ))}
                      </div>

                      {galleryState.hasMore && (
                        <div className="mt-6 flex justify-center">
                          <Button
                            variant="outline"
                            onClick={loadMoreImages}
                            disabled={galleryState.isLoading}
                            className="w-full max-w-xs text-sm"
                          >
                            {galleryState.isLoading ? (
                              <>
                                <Loader className="h-4 w-4 mr-2 animate-spin" />
                                Loading...
                              </>
                            ) : (
                              "Load More Images"
                            )}
                          </Button>
                        </div>
                      )}
                    </>
                  ) : (
                    <div className="text-center p-6 sm:p-12 border-2 border-dashed rounded-md">
                      <ImageIcon className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                      <h3 className="text-lg font-medium mb-2">No Images Found</h3>
                      <p className="text-gray-500 mb-4">
                        {galleryState.searchTerm
                          ? `No images found for "${galleryState.searchTerm}". Try a different search term.`
                          : "Try searching for something specific or select a category."}
                      </p>
                      <Button onClick={() => setGalleryView("categories")} className="text-sm">
                        Browse Categories
                      </Button>
                    </div>
                  )}

                  {galleryView === "images" && (
                    <div className="mt-4 text-xs text-gray-500 text-center">
                      <p>Images provided by Pexels API</p>
                    </div>
                  )}
                </CardContent>
              </Card>
            </div>

            {/* Action buttons for this tab */}
            {designState.imageUrl && (
              <div className="flex justify-center gap-4 mt-6 mb-12">
                <Button variant="outline" onClick={handleShareDesign} className="flex-1 max-w-[150px]">
                  <Share2 className="h-4 w-4 mr-2" />
                  Share
                </Button>
                <Button variant="outline" onClick={handleSaveDesign} className="flex-1 max-w-[150px]">
                  <Save className="h-4 w-4 mr-2" />
                  Save Design
                </Button>
                <Button variant="outline" onClick={handleDownload} className="flex-1 max-w-[150px]">
                  <Download className="h-4 w-4 mr-2" />
                  Download
                </Button>
                <Button variant="default" onClick={handleAddToCart} className="flex-1 max-w-[150px]">
                  <ShoppingCart className="h-4 w-4 mr-2" />
                  Add to Cart
                </Button>
              </div>
            )}
          </TabsContent>

          {/* Generate Tab */}
          <TabsContent value="generate">
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
              {/* Tools Sidebar */}
              {sidebarOpen && (
                <div className="md:col-span-1 order-2 md:order-1">
                  <Card className="bg-[#f8d7e9] sticky top-4">
                    <CardHeader className="p-4">
                      <CardTitle className="text-lg">AI Tools</CardTitle>
                      <CardDescription>Generate custom designs</CardDescription>
                    </CardHeader>
                    <CardContent className="space-y-3 p-4">
                      <div className="space-y-2">
                        <Label htmlFor="prompt" className="text-sm">
                          Describe your design
                        </Label>
                        <Textarea
                          id="prompt"
                          placeholder="E.g., A colorful birthday cake with confetti and balloons, digital art style"
                          value={prompt}
                          onChange={(e) => setPrompt(e.target.value)}
                          className="min-h-[100px] text-sm"
                        />
                      </div>

                      <Button
                        className="w-full bg-rose-600 hover:bg-rose-700 text-white text-sm"
                        onClick={handleGenerateImage}
                        disabled={isGenerating || !prompt.trim()}
                      >
                        {isGenerating ? (
                          <>
                            <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                            Generating...
                          </>
                        ) : (
                          <>
                            <Wand2 className="h-4 w-4 mr-2" />
                            Generate Image
                          </>
                        )}
                      </Button>

                      {designState.generatedImageUrl && (
                        <>
                          <Separator />
                          <p className="text-sm font-medium">Generated Image</p>
                          <Button
                            className="w-full justify-start text-sm"
                            variant="outline"
                            onClick={handleGenerateImage}
                            disabled={isGenerating}
                          >
                            <Repeat className="h-4 w-4 mr-2" />
                            Regenerate
                          </Button>

                          <Separator />
                          <p className="text-sm font-medium">Next Steps</p>
                          <Button
                            className="w-full justify-start text-sm"
                            variant="outline"
                            onClick={() => sendToTool("edit")}
                          >
                            <Edit className="h-4 w-4 mr-2" />
                            Edit Design
                          </Button>

                          <Button
                            className="w-full justify-start text-sm"
                            variant="outline"
                            onClick={() => sendToTool("process")}
                          >
                            <Eraser className="h-4 w-4 mr-2" />
                            Remove Background
                          </Button>

                          <Button
                            className="w-full justify-start text-sm"
                            variant="outline"
                            onClick={() => sendToTool("preview3d")}
                          >
                            <Cube className="h-4 w-4 mr-2" />
                            3D Preview
                          </Button>
                        </>
                      )}
                    </CardContent>
                  </Card>
                </div>
              )}

              {/* Main Content */}
              <Card className="md:col-span-3 order-1 md:order-2">
                <CardHeader className="p-4">
                  <CardTitle>AI Image Generator</CardTitle>
                  <CardDescription>Generate custom images with AI for your edible treats</CardDescription>
                </CardHeader>
                <CardContent className="space-y-6 p-4">
                  {designState.generatedImageUrl ? (
                    <div className="border rounded-lg p-4">
                      <h3 className="text-lg font-medium mb-2">Generated Image</h3>
                      <img
                        src={designState.generatedImageUrl || "/placeholder.svg"}
                        alt="AI generated"
                        className="w-full max-h-64 object-contain rounded-md mb-4"
                      />
                      <p className="text-sm text-gray-500 mt-2">
                        Your AI-generated image is ready! You can now edit it, remove the background, or see it in 3D.
                      </p>
                    </div>
                  ) : (
                    <div className="text-center p-6 sm:p-12 border-2 border-dashed rounded-md">
                      <Wand2 className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                      <h3 className="text-lg font-medium mb-2">AI Image Generation</h3>
                      <p className="text-gray-500 mb-4">
                        Enter a detailed description of what you want to create in the prompt field on the left. Our AI
                        will generate a custom image based on your description.
                      </p>
                      <div className="max-w-md mx-auto">
                        <p className="text-sm text-gray-500 mb-2">Example prompts:</p>
                        <ul className="text-sm text-gray-500 list-disc list-inside space-y-1 text-left">
                          <li>A colorful birthday cake with confetti and balloons, digital art style</li>
                          <li>Elegant wedding rings with floral decorations, photorealistic</li>
                          <li>Corporate logo with modern design on a cookie, professional look</li>
                        </ul>
                      </div>
                    </div>
                  )}
                </CardContent>
              </Card>
            </div>

            {/* Action buttons for this tab */}
            {designState.generatedImageUrl && (
              <div className="flex justify-center gap-4 mt-6 mb-12">
                <Button variant="outline" onClick={handleShareDesign} className="flex-1 max-w-[150px]">
                  <Share2 className="h-4 w-4 mr-2" />
                  Share
                </Button>
                <Button variant="outline" onClick={handleSaveDesign} className="flex-1 max-w-[150px]">
                  <Save className="h-4 w-4 mr-2" />
                  Save Design
                </Button>
                <Button variant="outline" onClick={handleDownload} className="flex-1 max-w-[150px]">
                  <Download className="h-4 w-4 mr-2" />
                  Download
                </Button>
                <Button variant="default" onClick={handleAddToCart} className="flex-1 max-w-[150px]">
                  <ShoppingCart className="h-4 w-4 mr-2" />
                  Add to Cart
                </Button>
              </div>
            )}
          </TabsContent>

          {/* Process Tab */}
          <TabsContent value="process">
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
              {/* Tools Sidebar */}
              {sidebarOpen && (
                <div className="md:col-span-1 order-2 md:order-1">
                  <Card className="bg-[#f8d7e9] sticky top-4">
                    <CardHeader className="p-4">
                      <CardTitle className="text-lg">Image Tools</CardTitle>
                      <CardDescription>Enhance your design</CardDescription>
                    </CardHeader>
                    <CardContent className="space-y-3 p-4">
                      {designState.imageUrl ? (
                        <>
                          <p className="text-sm font-medium">Enhancement Options</p>
                          <Button
                            className="w-full justify-start text-sm bg-rose-600 hover:bg-rose-700 text-white"
                            onClick={handleRemoveBackground}
                            disabled={isRemovingBackground}
                          >
                            {isRemovingBackground ? (
                              <>
                                <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                                Processing...
                              </>
                            ) : (
                              <>
                                <Eraser className="h-4 w-4 mr-2" />
                                Remove Background
                              </>
                            )}
                          </Button>

                          <Button
                            className="w-full justify-start text-sm"
                            variant="outline"
                            onClick={handleUpscaleImage}
                            disabled={isUpscaling}
                          >
                            {isUpscaling ? (
                              <>
                                <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                                Processing...
                              </>
                            ) : (
                              <>
                                <ZoomIn className="h-4 w-4 mr-2" />
                                Enhance & Upscale
                              </>
                            )}
                          </Button>

                          <Separator />
                          <p className="text-sm font-medium">Next Steps</p>
                          <Button
                            className="w-full justify-start text-sm"
                            variant="outline"
                            onClick={() => sendToTool("edit")}
                          >
                            <Edit className="h-4 w-4 mr-2" />
                            Edit Design
                          </Button>

                          <Button
                            className="w-full justify-start text-sm"
                            variant="outline"
                            onClick={() => sendToTool("preview3d")}
                          >
                            <Cube className="h-4 w-4 mr-2" />
                            3D Preview
                          </Button>
                        </>
                      ) : (
                        <>
                          <p className="text-sm text-gray-500 mb-4">Please upload or select an image first</p>
                          <Button className="w-full justify-start text-sm" onClick={() => navigateToTab("upload")}>
                            <Upload className="h-4 w-4 mr-2" />
                            Upload Image
                          </Button>

                          <Button
                            className="w-full justify-start text-sm"
                            variant="outline"
                            onClick={() => navigateToTab("gallery")}
                          >
                            <ImageIcon className="h-4 w-4 mr-2" />
                            Browse Gallery
                          </Button>
                        </>
                      )}
                    </CardContent>
                  </Card>
                </div>
              )}

              {/* Main Content */}
              <Card className="md:col-span-3 order-1 md:order-2">
                <CardHeader className="p-4">
                  <CardTitle>Background Removal & Enhancement</CardTitle>
                  <CardDescription>Remove backgrounds and enhance your images</CardDescription>
                </CardHeader>
                <CardContent className="space-y-6 p-4">
                  {designState.imageUrl ? (
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="space-y-4">
                        <div className="border rounded-lg p-4">
                          <h3 className="text-lg font-medium mb-2">Original Image</h3>
                          <img
                            src={designState.imageUrl || "/placeholder.svg"}
                            alt="Current"
                            className="w-full aspect-square object-contain rounded-md"
                          />
                        </div>
                      </div>

                      <div className="space-y-4">
                        <div className="border rounded-lg p-4 h-full flex flex-col">
                          <h3 className="text-lg font-medium mb-2">Processed Result</h3>
                          {designState.removedBgImageUrl || designState.upscaledImageUrl ? (
                            <img
                              src={designState.removedBgImageUrl || designState.upscaledImageUrl}
                              alt="Processed"
                              className="w-full flex-1 object-contain rounded-md"
                            />
                          ) : (
                            <div className="flex-1 flex items-center justify-center text-center p-6 border-2 border-dashed rounded-md">
                              <div>
                                <AlertCircle className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                                <p className="text-gray-500">
                                  Processed image will appear here after you apply an operation
                                </p>
                              </div>
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  ) : (
                    <div className="text-center p-6 sm:p-12 border-2 border-dashed rounded-md">
                      <AlertCircle className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                      <h3 className="text-lg font-medium mb-2">No Image Selected</h3>
                      <p className="text-gray-500 mb-4">Please upload or select an image first</p>
                      <div className="flex flex-wrap justify-center gap-4">
                        <Button onClick={() => navigateToTab("upload")} className="text-sm">
                          <Upload className="h-4 w-4 mr-2" />
                          Upload Image
                        </Button>
                        <Button variant="outline" onClick={() => navigateToTab("gallery")} className="text-sm">
                          <ImageIcon className="h-4 w-4 mr-2" />
                          Browse Gallery
                        </Button>
                      </div>
                    </div>
                  )}
                </CardContent>
              </Card>
            </div>

            {/* Action buttons for this tab */}
            {designState.imageUrl && (
              <div className="flex justify-center gap-4 mt-6 mb-12">
                <Button variant="outline" onClick={handleShareDesign} className="flex-1 max-w-[150px]">
                  <Share2 className="h-4 w-4 mr-2" />
                  Share
                </Button>
                <Button variant="outline" onClick={handleSaveDesign} className="flex-1 max-w-[150px]">
                  <Save className="h-4 w-4 mr-2" />
                  Save Design
                </Button>
                <Button variant="outline" onClick={handleDownload} className="flex-1 max-w-[150px]">
                  <Download className="h-4 w-4 mr-2" />
                  Download
                </Button>
                <Button variant="default" onClick={handleAddToCart} className="flex-1 max-w-[150px]">
                  <ShoppingCart className="h-4 w-4 mr-2" />
                  Add to Cart
                </Button>
              </div>
            )}
          </TabsContent>

          {/* 3D Preview Tab */}
          <TabsContent value="preview3d">
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
              {/* Tools Sidebar */}
              {sidebarOpen && (
                <div className="md:col-span-1 order-2 md:order-1">
                  <Card className="bg-[#f8d7e9] sticky top-4">
                    <CardHeader className="p-4">
                      <CardTitle className="text-lg">3D Tools</CardTitle>
                      <CardDescription>Preview your design in 3D</CardDescription>
                    </CardHeader>
                    <CardContent className="space-y-3 p-4">
                      {designState.imageUrl ? (
                        <>
                          <p className="text-sm font-medium">Cookie Shape</p>
                          <div className="grid grid-cols-3 gap-2">
                            {cookieShapes.map((shape) => (
                              <div
                                key={shape.id}
                                className={`border rounded-md p-1 cursor-pointer transition-all hover:bg-gray-50 ${
                                  designState.cookieShape === shape.id ? "ring-2 ring-rose-500 bg-rose-50" : ""
                                }`}
                                onClick={() => handleShapeSelect(shape.id)}
                              >
                                <img
                                  src={shape.svgPath || "/placeholder.svg"}
                                  alt={shape.name}
                                  className="w-full aspect-square object-contain"
                                />
                                <p className="text-xs text-center mt-1">{shape.name}</p>
                              </div>
                            ))}
                          </div>

                          <Collapsible open={showMoreShapes} onOpenChange={toggleMoreShapes}>
                            <CollapsibleTrigger asChild>
                              <Button variant="outline" className="w-full justify-between text-sm mt-2">
                                <span>More Shapes</span>
                                {showMoreShapes ? (
                                  <ChevronUp className="h-4 w-4" />
                                ) : (
                                  <ChevronDown className="h-4 w-4" />
                                )}
                              </Button>
                            </CollapsibleTrigger>
                            <CollapsibleContent>
                              <div className="grid grid-cols-3 gap-2 mt-2">
                                {additionalShapes.map((shape) => (
                                  <div
                                    key={shape.id}
                                    className={`border rounded-md p-1 cursor-pointer transition-all hover:bg-gray-50 ${
                                      designState.cookieShape === shape.id ? "ring-2 ring-rose-500 bg-rose-50" : ""
                                    }`}
                                    onClick={() => handleShapeSelect(shape.id)}
                                  >
                                    <img
                                      src={shape.svgPath || "/placeholder.svg"}
                                      alt={shape.name}
                                      className="w-full aspect-square object-contain"
                                    />
                                    <p className="text-xs text-center mt-1">{shape.name}</p>
                                  </div>
                                ))}
                              </div>
                            </CollapsibleContent>
                          </Collapsible>

                          <Separator />
                          <p className="text-sm font-medium">Actions</p>
                          <Button
                            className="w-full justify-start text-sm"
                            variant="outline"
                            onClick={() => sendToTool("edit")}
                          >
                            <Edit className="h-4 w-4 mr-2" />
                            Edit Design
                          </Button>
                        </>
                      ) : (
                        <>
                          <p className="text-sm text-gray-500 mb-4">Please upload or select an image first</p>
                          <Button className="w-full justify-start text-sm" onClick={() => navigateToTab("upload")}>
                            <Upload className="h-4 w-4 mr-2" />
                            Upload Image
                          </Button>

                          <Button
                            className="w-full justify-start text-sm"
                            variant="outline"
                            onClick={() => navigateToTab("gallery")}
                          >
                            <ImageIcon className="h-4 w-4 mr-2" />
                            Browse Gallery
                          </Button>
                        </>
                      )}
                    </CardContent>
                  </Card>
                </div>
              )}

              {/* Main Content */}
              <Card className="md:col-span-3 order-1 md:order-2">
                <CardHeader className="p-4">
                  <CardTitle>3D Cookie Preview</CardTitle>
                  <CardDescription>See how your design will look on a real cookie</CardDescription>
                </CardHeader>
                <CardContent className="space-y-6 p-4">
                  {designState.imageUrl ? (
                    <div className="space-y-6">
                      <div className="border rounded-lg p-4">
                        <h3 className="text-lg font-medium mb-2">3D Preview</h3>
                        <div className="relative">
                          <Cookie3DPreview imageUrl={designState.imageUrl} shape={designState.cookieShape} />
                          <div className="absolute top-2 right-2 bg-white/80 text-black text-xs px-2 py-1 rounded-full z-10">
                            Drag to rotate
                          </div>
                        </div>
                        <p className="text-sm text-gray-500 mt-4">
                          This is how your design will look when printed on a real cookie. You can change the cookie
                          shape using the options on the left.
                        </p>
                      </div>
                    </div>
                  ) : (
                    <div className="text-center p-6 sm:p-12 border-2 border-dashed rounded-md">
                      <Cube className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                      <h3 className="text-lg font-medium mb-2">No Image Selected</h3>
                      <p className="text-gray-500 mb-4">Please upload or select an image first</p>
                      <div className="flex flex-wrap justify-center gap-4">
                        <Button onClick={() => navigateToTab("upload")} className="text-sm">
                          <Upload className="h-4 w-4 mr-2" />
                          Upload Image
                        </Button>
                        <Button variant="outline" onClick={() => navigateToTab("gallery")} className="text-sm">
                          <ImageIcon className="h-4 w-4 mr-2" />
                          Browse Gallery
                        </Button>
                      </div>
                    </div>
                  )}
                </CardContent>
              </Card>
            </div>

            {/* Action buttons for this tab */}
            {designState.imageUrl && (
              <div className="flex justify-center gap-4 mt-6 mb-12">
                <Button variant="outline" onClick={handleShareDesign} className="flex-1 max-w-[150px]">
                  <Share2 className="h-4 w-4 mr-2" />
                  Share
                </Button>
                <Button variant="outline" onClick={handleSaveDesign} className="flex-1 max-w-[150px]">
                  <Save className="h-4 w-4 mr-2" />
                  Save Design
                </Button>
                <Button variant="outline" onClick={handleDownload} className="flex-1 max-w-[150px]">
                  <Download className="h-4 w-4 mr-2" />
                  Download
                </Button>
                <Button variant="default" onClick={handleAddToCart} className="flex-1 max-w-[150px]">
                  <ShoppingCart className="h-4 w-4 mr-2" />
                  Add to Cart
                </Button>
              </div>
            )}
          </TabsContent>

          {/* Edit Tab */}
          <TabsContent value="edit">
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
              {/* Tools Sidebar */}
              {sidebarOpen && (
                <div className="md:col-span-1 order-2 md:order-1">
                  <Card className="bg-[#f8d7e9] sticky top-4">
                    <CardHeader className="p-4">
                      <CardTitle className="text-lg">Edit Tools</CardTitle>
                      <CardDescription>Customize your design</CardDescription>
                    </CardHeader>
                    <CardContent className="space-y-3 p-4">
                      {designState.imageUrl ? (
                        <>
                          <p className="text-sm font-medium">Basic Adjustments</p>
                          <div className="space-y-2">
                            <div className="flex justify-between items-center">
                              <Label htmlFor="zoom" className="text-xs">
                                Zoom
                              </Label>
                              <div className="flex gap-1">
                                <Button
                                  variant="outline"
                                  size="icon"
                                  className="h-6 w-6"
                                  onClick={() =>
                                    updateEditSettings("zoom", Math.max(50, designState.editSettings.zoom - 10))
                                  }
                                >
                                  <ZoomOut className="h-3 w-3" />
                                </Button>
                                <Button
                                  variant="outline"
                                  size="icon"
                                  className="h-6 w-6"
                                  onClick={() =>
                                    updateEditSettings("zoom", Math.min(150, designState.editSettings.zoom + 10))
                                  }
                                >
                                  <ZoomIn className="h-3 w-3" />
                                </Button>
                              </div>
                            </div>
                            <Slider
                              id="zoom"
                              min={50}
                              max={150}
                              step={1}
                              value={[designState.editSettings.zoom]}
                              onValueChange={(value) => updateEditSettings("zoom", value[0])}
                            />
                            <p className="text-xs text-right">{designState.editSettings.zoom}%</p>
                          </div>

                          <div className="space-y-2">
                            <div className="flex justify-between items-center">
                              <Label htmlFor="rotation" className="text-xs">
                                Rotation
                              </Label>
                              <Button
                                variant="outline"
                                size="icon"
                                className="h-6 w-6"
                                onClick={() =>
                                  updateEditSettings("rotation", (designState.editSettings.rotation + 90) % 360)
                                }
                              >
                                <RotateCw className="h-3 w-3" />
                              </Button>
                            </div>
                            <Slider
                              id="rotation"
                              min={0}
                              max={359}
                              step={1}
                              value={[designState.editSettings.rotation]}
                              onValueChange={(value) => updateEditSettings("rotation", value[0])}
                            />
                            <p className="text-xs text-right">{designState.editSettings.rotation}°</p>
                          </div>

                          <div className="space-y-2">
                            <div className="flex justify-between items-center">
                              <Label htmlFor="brightness" className="text-xs">
                                Brightness
                              </Label>
                              <Button
                                variant="outline"
                                size="icon"
                                className="h-6 w-6"
                                onClick={() => updateEditSettings("brightness", 100)}
                              >
                                <Sun className="h-3 w-3" />
                              </Button>
                            </div>
                            <Slider
                              id="brightness"
                              min={50}
                              max={150}
                              step={1}
                              value={[designState.editSettings.brightness]}
                              onValueChange={(value) => updateEditSettings("brightness", value[0])}
                            />
                            <p className="text-xs text-right">{designState.editSettings.brightness}%</p>
                          </div>

                          <div className="space-y-2">
                            <div className="flex justify-between items-center">
                              <Label htmlFor="contrast" className="text-xs">
                                Contrast
                              </Label>
                              <Button
                                variant="outline"
                                size="icon"
                                className="h-6 w-6"
                                onClick={() => updateEditSettings("contrast", 100)}
                              >
                                <Contrast className="h-3 w-3" />
                              </Button>
                            </div>
                            <Slider
                              id="contrast"
                              min={50}
                              max={150}
                              step={1}
                              value={[designState.editSettings.contrast]}
                              onValueChange={(value) => updateEditSettings("contrast", value[0])}
                            />
                            <p className="text-xs text-right">{designState.editSettings.contrast}%</p>
                          </div>

                          <Separator />
                          <p className="text-sm font-medium">Text & Color</p>
                          <div className="space-y-2">
                            <Label htmlFor="textOverlay" className="text-xs">
                              Text Overlay
                            </Label>
                            <Input
                              id="textOverlay"
                              value={designState.editSettings.textOverlay}
                              onChange={(e) => updateEditSettings("textOverlay", e.target.value)}
                              placeholder="Add text"
                              className="text-sm"
                            />
                          </div>

                          <div className="space-y-2">
                            <Label htmlFor="textColor" className="text-xs">
                              Text Color
                            </Label>
                            <div className="flex gap-2">
                              <Input
                                id="textColor"
                                type="color"
                                value={designState.editSettings.textColor}
                                onChange={(e) => updateEditSettings("textColor", e.target.value)}
                                className="w-12 h-8 p-1"
                              />
                              <Input
                                value={designState.editSettings.textColor}
                                onChange={(e) => updateEditSettings("textColor", e.target.value)}
                                className="flex-1 h-8 text-sm"
                              />
                            </div>
                          </div>

                          <div className="space-y-2">
                            <Label htmlFor="overlayColor" className="text-xs">
                              Color Overlay
                            </Label>
                            <div className="flex gap-2">
                              <Input
                                id="overlayColor"
                                type="color"
                                value={designState.editSettings.overlayColor.replace(/[^#\w]/g, "")}
                                onChange={(e) => {
                                  const color = e.target.value
                                  updateEditSettings("overlayColor", `${color}80`) // 50% opacity
                                }}
                                className="w-12 h-8 p-1"
                              />
                              <Button
                                variant="outline"
                                className="flex-1 h-8 text-xs"
                                onClick={() => updateEditSettings("overlayColor", "rgba(0,0,0,0)")}
                              >
                                Clear Overlay
                              </Button>
                            </div>
                          </div>

                          <Separator />
                          <p className="text-sm font-medium">Shapes</p>
                          <div className="grid grid-cols-4 gap-2">
                            <div
                              className={`border rounded-md p-1 cursor-pointer transition-all hover:bg-gray-50 ${
                                designState.editSettings.selectedShape === "none"
                                  ? "ring-2 ring-rose-500 bg-rose-50"
                                  : ""
                              }`}
                              onClick={() => updateEditSettings("selectedShape", "none")}
                            >
                              <div className="w-full aspect-square flex items-center justify-center">
                                <X className="h-5 w-5 text-gray-400" />
                              </div>
                              <p className="text-xs text-center">None</p>
                            </div>
                            <div
                              className={`border rounded-md p-1 cursor-pointer transition-all hover:bg-gray-50 ${
                                designState.editSettings.selectedShape === "square"
                                  ? "ring-2 ring-rose-500 bg-rose-50"
                                  : ""
                              }`}
                              onClick={() => updateEditSettings("selectedShape", "square")}
                            >
                              <div className="w-full aspect-square flex items-center justify-center">
                                <Square className="h-5 w-5" />
                              </div>
                              <p className="text-xs text-center">Square</p>
                            </div>
                            <div
                              className={`border rounded-md p-1 cursor-pointer transition-all hover:bg-gray-50 ${
                                designState.editSettings.selectedShape === "circle"
                                  ? "ring-2 ring-rose-500 bg-rose-50"
                                  : ""
                              }`}
                              onClick={() => updateEditSettings("selectedShape", "circle")}
                            >
                              <div className="w-full aspect-square flex items-center justify-center">
                                <Circle className="h-5 w-5" />
                              </div>
                              <p className="text-xs text-center">Circle</p>
                            </div>
                            <div
                              className={`border rounded-md p-1 cursor-pointer transition-all hover:bg-gray-50 ${
                                designState.editSettings.selectedShape === "heart"
                                  ? "ring-2 ring-rose-500 bg-rose-50"
                                  : ""
                              }`}
                              onClick={() => updateEditSettings("selectedShape", "heart")}
                            >
                              <div className="w-full aspect-square flex items-center justify-center">
                                <Heart className="h-5 w-5" />
                              </div>
                              <p className="text-xs text-center">Heart</p>
                            </div>
                          </div>

                          <Button
                            className="w-full bg-rose-600 hover:bg-rose-700 text-white mt-4 text-sm"
                            onClick={applyEdits}
                            disabled={isProcessing}
                          >
                            {isProcessing ? (
                              <>
                                <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                                Applying...
                              </>
                            ) : (
                              <>
                                <Check className="h-4 w-4 mr-2" />
                                Apply Changes
                              </>
                            )}
                          </Button>

                          <Separator />
                          <p className="text-sm font-medium">Next Steps</p>
                          <Button
                            className="w-full justify-start text-sm"
                            variant="outline"
                            onClick={() => sendToTool("process")}
                          >
                            <Eraser className="h-4 w-4 mr-2" />
                            Remove Background
                          </Button>

                          <Button
                            className="w-full justify-start text-sm"
                            variant="outline"
                            onClick={() => sendToTool("preview3d")}
                          >
                            <Cube className="h-4 w-4 mr-2" />
                            3D Preview
                          </Button>
                        </>
                      ) : (
                        <>
                          <p className="text-sm text-gray-500 mb-4">Please upload or select an image first</p>
                          <Button className="w-full justify-start text-sm" onClick={() => navigateToTab("upload")}>
                            <Upload className="h-4 w-4 mr-2" />
                            Upload Image
                          </Button>

                          <Button
                            className="w-full justify-start text-sm"
                            variant="outline"
                            onClick={() => navigateToTab("gallery")}
                          >
                            <ImageIcon className="h-4 w-4 mr-2" />
                            Browse Gallery
                          </Button>
                        </>
                      )}
                    </CardContent>
                  </Card>
                </div>
              )}

              {/* Main Content */}
              <Card className="md:col-span-3 order-1 md:order-2">
                <CardHeader className="p-4">
                  <CardTitle>Edit Design</CardTitle>
                  <CardDescription>Customize your image with various editing tools</CardDescription>
                </CardHeader>
                <CardContent className="space-y-6 p-4">
                  {designState.imageUrl ? (
                    <div className="border rounded-lg p-4">
                      <h3 className="text-lg font-medium mb-2">Preview</h3>
                      <div className="flex items-center justify-center bg-gray-100 rounded-md overflow-hidden p-4 min-h-[300px]">
                        <div
                          className="relative"
                          style={{
                            transform: `scale(${designState.editSettings.zoom / 100}) rotate(${designState.editSettings.rotation}deg)`,
                            filter: `brightness(${designState.editSettings.brightness / 100}) contrast(${designState.editSettings.contrast / 100})`,
                            transition: "transform 0.3s, filter 0.3s",
                          }}
                        >
                          <img
                            src={designState.imageUrl || "/placeholder.svg"}
                            alt="Preview"
                            className="max-w-full max-h-[300px] object-contain"
                          />

                          {/* Color Overlay */}
                          {designState.editSettings.overlayColor !== "rgba(0,0,0,0)" && (
                            <div
                              className="absolute inset-0"
                              style={{ backgroundColor: designState.editSettings.overlayColor }}
                            ></div>
                          )}

                          {/* Text Overlay */}
                          {designState.editSettings.textOverlay && (
                            <div className="absolute inset-0 flex items-center justify-center p-4">
                              <p
                                style={{
                                  color: designState.editSettings.textColor,
                                  textShadow: "1px 1px 2px rgba(0,0,0,0.5)",
                                }}
                                className="text-2xl font-bold text-center"
                              >
                                {designState.editSettings.textOverlay}
                              </p>
                            </div>
                          )}

                          {/* Shape Mask */}
                          {designState.editSettings.selectedShape !== "none" && (
                            <div className="absolute inset-0 flex items-center justify-center">
                              {designState.editSettings.selectedShape === "circle" && (
                                <div className="absolute inset-0 bg-white">
                                  <div
                                    className="absolute inset-0 rounded-full overflow-hidden"
                                    style={{ margin: "10%" }}
                                  >
                                    <img
                                      src={designState.imageUrl || "/placeholder.svg"}
                                      alt="Circle preview"
                                      className="w-full h-full object-cover"
                                      style={{
                                        filter: `brightness(${designState.editSettings.brightness / 100}) contrast(${designState.editSettings.contrast / 100})`,
                                      }}
                                    />
                                  </div>
                                </div>
                              )}
                              {designState.editSettings.selectedShape === "square" && (
                                <div className="absolute inset-0 bg-white">
                                  <div className="absolute inset-0 overflow-hidden" style={{ margin: "10%" }}>
                                    <img
                                      src={designState.imageUrl || "/placeholder.svg"}
                                      alt="Square preview"
                                      className="w-full h-full object-cover"
                                      style={{
                                        filter: `brightness(${designState.editSettings.brightness / 100}) contrast(${designState.editSettings.contrast / 100})`,
                                      }}
                                    />
                                  </div>
                                </div>
                              )}
                              {designState.editSettings.selectedShape === "heart" && (
                                <div className="absolute inset-0 flex items-center justify-center">
                                  <div className="w-3/4 h-3/4 relative">
                                    <svg viewBox="0 0 100 100" className="absolute inset-0 w-full h-full">
                                      <defs>
                                        <clipPath id="heartShape">
                                          <path d="M50,30 C35,10 0,10 0,40 C0,65 25,85 50,95 C75,85 100,65 100,40 C100,10 65,10 50,30 Z" />
                                        </clipPath>
                                      </defs>
                                      <foreignObject width="100" height="100" clipPath="url(#heartShape)">
                                        <div className="w-full h-full overflow-hidden">
                                          <img
                                            src={designState.imageUrl || "/placeholder.svg"}
                                            alt="Heart preview"
                                            className="w-full h-full object-cover"
                                            style={{
                                              filter: `brightness(${designState.editSettings.brightness / 100}) contrast(${designState.editSettings.contrast / 100})`,
                                            }}
                                          />
                                        </div>
                                      </foreignObject>
                                    </svg>
                                  </div>
                                </div>
                              )}
                            </div>
                          )}
                        </div>
                      </div>
                      <p className="text-sm text-gray-500 mt-4">
                        Use the tools on the left to customize your design. You can adjust brightness, contrast, add
                        text, and apply shape masks.
                      </p>
                    </div>
                  ) : (
                    <div className="text-center p-6 sm:p-12 border-2 border-dashed rounded-md">
                      <Edit className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                      <h3 className="text-lg font-medium mb-2">No Image Selected</h3>
                      <p className="text-gray-500 mb-4">Please upload or select an image first</p>
                      <div className="flex flex-wrap justify-center gap-4">
                        <Button onClick={() => navigateToTab("upload")} className="text-sm">
                          <Upload className="h-4 w-4 mr-2" />
                          Upload Image
                        </Button>
                        <Button variant="outline" onClick={() => navigateToTab("gallery")} className="text-sm">
                          <ImageIcon className="h-4 w-4 mr-2" />
                          Browse Gallery
                        </Button>
                      </div>
                    </div>
                  )}
                </CardContent>
              </Card>
            </div>

            {/* Action buttons for this tab */}
            {designState.imageUrl && (
              <div className="flex justify-center gap-4 mt-6 mb-12">
                <Button variant="outline" onClick={handleShareDesign} className="flex-1 max-w-[150px]">
                  <Share2 className="h-4 w-4 mr-2" />
                  Share
                </Button>
                <Button variant="outline" onClick={handleSaveDesign} className="flex-1 max-w-[150px]">
                  <Save className="h-4 w-4 mr-2" />
                  Save Design
                </Button>
                <Button variant="outline" onClick={handleDownload} className="flex-1 max-w-[150px]">
                  <Download className="h-4 w-4 mr-2" />
                  Download
                </Button>
                <Button variant="default" onClick={handleAddToCart} className="flex-1 max-w-[150px]">
                  <ShoppingCart className="h-4 w-4 mr-2" />
                  Add to Cart
                </Button>
              </div>
            )}
          </TabsContent>
        </Tabs>
      </div>
    </div>
  )
}
